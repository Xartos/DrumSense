
DrumSense.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000059a  0000060e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b5  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c0  00000000  00000000  00001091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050c  00000000  00000000  00001851  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002de  00000000  00000000  00002243  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002521  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a1 01 	call	0x342	; 0x342 <main>
  8e:	0c 94 cb 02 	jmp	0x596	; 0x596 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initLEDs>:
/*
 * Returns the value of the 10-bit ADC register
 */
uint16_t readADC(){
	return ADC;
}
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	8e 60       	ori	r24, 0x0E	; 14
  9e:	84 b9       	out	0x04, r24	; 4
  a0:	c3 eb       	ldi	r28, 0xB3	; 179
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	18 82       	st	Y, r1
  a6:	a8 e8       	ldi	r26, 0x88	; 136
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	11 96       	adiw	r26, 0x01	; 1
  ac:	1c 92       	st	X, r1
  ae:	1e 92       	st	-X, r1
  b0:	4a e8       	ldi	r20, 0x8A	; 138
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	fa 01       	movw	r30, r20
  b6:	11 82       	std	Z+1, r1	; 0x01
  b8:	10 82       	st	Z, r1
  ba:	20 e8       	ldi	r18, 0x80	; 128
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	f9 01       	movw	r30, r18
  c0:	80 81       	ld	r24, Z
  c2:	81 68       	ori	r24, 0x81	; 129
  c4:	80 83       	st	Z, r24
  c6:	21 e8       	ldi	r18, 0x81	; 129
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	80 81       	ld	r24, Z
  ce:	89 60       	ori	r24, 0x09	; 9
  d0:	80 83       	st	Z, r24
  d2:	20 eb       	ldi	r18, 0xB0	; 176
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	80 81       	ld	r24, Z
  da:	83 68       	ori	r24, 0x83	; 131
  dc:	80 83       	st	Z, r24
  de:	21 eb       	ldi	r18, 0xB1	; 177
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	88 83       	st	Y, r24
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	11 96       	adiw	r26, 0x01	; 1
  f4:	9c 93       	st	X, r25
  f6:	8e 93       	st	-X, r24
  f8:	fa 01       	movw	r30, r20
  fa:	91 83       	std	Z+1, r25	; 0x01
  fc:	80 83       	st	Z, r24
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <initADCs>:
 104:	ec e7       	ldi	r30, 0x7C	; 124
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	85 60       	ori	r24, 0x05	; 5
 10c:	80 83       	st	Z, r24
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 6c       	ori	r24, 0xC0	; 192
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <getRandomStartColor>:


/*
 * Randomizes a color with at least one of the colors set to LEDMAX
 */
void getRandomStartColor(LED_t* leds){
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	ec 01       	movw	r28, r24
	uint16_t first = rand();
 12c:	0e 94 67 02 	call	0x4ce	; 0x4ce <rand>
 130:	7c 01       	movw	r14, r24
	uint16_t second = rand();
 132:	0e 94 67 02 	call	0x4ce	; 0x4ce <rand>
 136:	8c 01       	movw	r16, r24
	uint16_t third = rand();
 138:	0e 94 67 02 	call	0x4ce	; 0x4ce <rand>
 13c:	fc 01       	movw	r30, r24

	
	if(first >= second){
 13e:	e0 16       	cp	r14, r16
 140:	f1 06       	cpc	r15, r17
 142:	08 f4       	brcc	.+2      	; 0x146 <getRandomStartColor+0x2c>
 144:	4d c0       	rjmp	.+154    	; 0x1e0 <getRandomStartColor+0xc6>
		if (first >= third){
 146:	e8 16       	cp	r14, r24
 148:	f9 06       	cpc	r15, r25
 14a:	10 f1       	brcs	.+68     	; 0x190 <getRandomStartColor+0x76>
			// First is biggest
			leds->R = first / (RAND_MAX / LEDMAX + 1);
 14c:	97 01       	movw	r18, r14
 14e:	a1 e8       	ldi	r26, 0x81	; 129
 150:	bf e3       	ldi	r27, 0x3F	; 63
 152:	0e 94 0c 02 	call	0x418	; 0x418 <__umulhisi3>
 156:	96 95       	lsr	r25
 158:	87 95       	ror	r24
 15a:	92 95       	swap	r25
 15c:	82 95       	swap	r24
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	89 27       	eor	r24, r25
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	89 27       	eor	r24, r25
 166:	88 83       	st	Y, r24
 168:	bc 01       	movw	r22, r24
 16a:	77 27       	eor	r23, r23
			leds->G = second / (LEDMAX / leds->R + 1);
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
 174:	9b 01       	movw	r18, r22
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	c8 01       	movw	r24, r16
 17c:	b9 01       	movw	r22, r18
 17e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodhi4>
 182:	69 83       	std	Y+1, r22	; 0x01
			leds->B = third / (LEDMAX / leds->R + 1);
 184:	cf 01       	movw	r24, r30
 186:	b9 01       	movw	r22, r18
 188:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodhi4>
 18c:	6a 83       	std	Y+2, r22	; 0x02
			return;
 18e:	74 c0       	rjmp	.+232    	; 0x278 <getRandomStartColor+0x15e>
		}

		// Second is biggest
		leds->R = first / (LEDMAX / leds->G + 1);
 190:	69 81       	ldd	r22, Y+1	; 0x01
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	cc 24       	eor	r12, r12
 196:	ca 94       	dec	r12
 198:	d1 2c       	mov	r13, r1
 19a:	c6 01       	movw	r24, r12
 19c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
 1a0:	6f 5f       	subi	r22, 0xFF	; 255
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255
 1a4:	c7 01       	movw	r24, r14
 1a6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodhi4>
 1aa:	68 83       	st	Y, r22
		leds->G = second / (RAND_MAX / LEDMAX + 1);
 1ac:	98 01       	movw	r18, r16
 1ae:	a1 e8       	ldi	r26, 0x81	; 129
 1b0:	bf e3       	ldi	r27, 0x3F	; 63
 1b2:	0e 94 0c 02 	call	0x418	; 0x418 <__umulhisi3>
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	92 95       	swap	r25
 1bc:	82 95       	swap	r24
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	89 27       	eor	r24, r25
 1c2:	9f 70       	andi	r25, 0x0F	; 15
 1c4:	89 27       	eor	r24, r25
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	bc 01       	movw	r22, r24
 1ca:	77 27       	eor	r23, r23
		leds->B = third / (LEDMAX / leds->G + 1);
 1cc:	c6 01       	movw	r24, r12
 1ce:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
 1d2:	6f 5f       	subi	r22, 0xFF	; 255
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	cf 01       	movw	r24, r30
 1d8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodhi4>
 1dc:	6a 83       	std	Y+2, r22	; 0x02
		return;
 1de:	4c c0       	rjmp	.+152    	; 0x278 <getRandomStartColor+0x15e>
	} else if(second >= third){
 1e0:	08 17       	cp	r16, r24
 1e2:	19 07       	cpc	r17, r25
 1e4:	40 f1       	brcs	.+80     	; 0x236 <getRandomStartColor+0x11c>
		// Second is biggest
		leds->R = first / (LEDMAX / leds->G + 1);
 1e6:	69 81       	ldd	r22, Y+1	; 0x01
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	cc 24       	eor	r12, r12
 1ec:	ca 94       	dec	r12
 1ee:	d1 2c       	mov	r13, r1
 1f0:	c6 01       	movw	r24, r12
 1f2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
 1f6:	6f 5f       	subi	r22, 0xFF	; 255
 1f8:	7f 4f       	sbci	r23, 0xFF	; 255
 1fa:	c7 01       	movw	r24, r14
 1fc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodhi4>
 200:	68 83       	st	Y, r22
		leds->G = second / (RAND_MAX / LEDMAX + 1);
 202:	98 01       	movw	r18, r16
 204:	a1 e8       	ldi	r26, 0x81	; 129
 206:	bf e3       	ldi	r27, 0x3F	; 63
 208:	0e 94 0c 02 	call	0x418	; 0x418 <__umulhisi3>
 20c:	96 95       	lsr	r25
 20e:	87 95       	ror	r24
 210:	92 95       	swap	r25
 212:	82 95       	swap	r24
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	89 27       	eor	r24, r25
 218:	9f 70       	andi	r25, 0x0F	; 15
 21a:	89 27       	eor	r24, r25
 21c:	89 83       	std	Y+1, r24	; 0x01
 21e:	bc 01       	movw	r22, r24
 220:	77 27       	eor	r23, r23
		leds->B = third / (LEDMAX / leds->G + 1);
 222:	c6 01       	movw	r24, r12
 224:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
 228:	6f 5f       	subi	r22, 0xFF	; 255
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	cf 01       	movw	r24, r30
 22e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodhi4>
 232:	6a 83       	std	Y+2, r22	; 0x02
		return;
 234:	21 c0       	rjmp	.+66     	; 0x278 <getRandomStartColor+0x15e>
	}

	// Third is biggest
	leds->R = first / (LEDMAX / leds->B + 1);
 236:	6a 81       	ldd	r22, Y+2	; 0x02
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
 242:	9b 01       	movw	r18, r22
 244:	2f 5f       	subi	r18, 0xFF	; 255
 246:	3f 4f       	sbci	r19, 0xFF	; 255
 248:	c7 01       	movw	r24, r14
 24a:	b9 01       	movw	r22, r18
 24c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodhi4>
 250:	68 83       	st	Y, r22
	leds->G = second / (LEDMAX / leds->B + 1);
 252:	c8 01       	movw	r24, r16
 254:	b9 01       	movw	r22, r18
 256:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodhi4>
 25a:	69 83       	std	Y+1, r22	; 0x01
	leds->B = third / (RAND_MAX / LEDMAX + 1);
 25c:	9f 01       	movw	r18, r30
 25e:	a1 e8       	ldi	r26, 0x81	; 129
 260:	bf e3       	ldi	r27, 0x3F	; 63
 262:	0e 94 0c 02 	call	0x418	; 0x418 <__umulhisi3>
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	92 95       	swap	r25
 26c:	82 95       	swap	r24
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	89 27       	eor	r24, r25
 272:	9f 70       	andi	r25, 0x0F	; 15
 274:	89 27       	eor	r24, r25
 276:	8a 83       	std	Y+2, r24	; 0x02
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	08 95       	ret

0000028a <bumpLEDS>:

void bumpLEDS(LED_t* leds){
 28a:	fc 01       	movw	r30, r24
	uint8_t diff = 0;

	if(leds->R >= leds->G){
 28c:	20 81       	ld	r18, Z
 28e:	91 81       	ldd	r25, Z+1	; 0x01
 290:	29 17       	cp	r18, r25
 292:	48 f0       	brcs	.+18     	; 0x2a6 <bumpLEDS+0x1c>
		if (leds->R >= leds->B){
 294:	82 81       	ldd	r24, Z+2	; 0x02
 296:	28 17       	cp	r18, r24
 298:	18 f0       	brcs	.+6      	; 0x2a0 <bumpLEDS+0x16>
			// R is largest
			diff = LEDMAX - leds->R;
 29a:	82 2f       	mov	r24, r18
 29c:	80 95       	com	r24
 29e:	0a c0       	rjmp	.+20     	; 0x2b4 <bumpLEDS+0x2a>
		} else {
			// G is largest
			diff = LEDMAX - leds->G;
 2a0:	89 2f       	mov	r24, r25
 2a2:	80 95       	com	r24
 2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <bumpLEDS+0x2a>
		}
	} else {
		if(leds->G >= leds->B){
 2a6:	82 81       	ldd	r24, Z+2	; 0x02
 2a8:	98 17       	cp	r25, r24
 2aa:	18 f0       	brcs	.+6      	; 0x2b2 <bumpLEDS+0x28>
			// G is largest
			diff = LEDMAX - leds->G;
 2ac:	89 2f       	mov	r24, r25
 2ae:	80 95       	com	r24
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <bumpLEDS+0x2a>
		} else {
			// B is largest
			diff = LEDMAX - leds->B;
 2b2:	80 95       	com	r24
		}
	}

	leds->R += diff;
 2b4:	28 0f       	add	r18, r24
 2b6:	20 83       	st	Z, r18
	leds->G += diff;
 2b8:	98 0f       	add	r25, r24
 2ba:	91 83       	std	Z+1, r25	; 0x01
	leds->B += diff;
 2bc:	92 81       	ldd	r25, Z+2	; 0x02
 2be:	89 0f       	add	r24, r25
 2c0:	82 83       	std	Z+2, r24	; 0x02
 2c2:	08 95       	ret

000002c4 <decreaseLED>:
}

void decreaseLED(LED_t* leds){
 2c4:	fc 01       	movw	r30, r24
	leds->R = (leds->R > LEDFADE) ? (leds->R - LEDFADE) : 0;
 2c6:	80 81       	ld	r24, Z
 2c8:	89 30       	cpi	r24, 0x09	; 9
 2ca:	10 f0       	brcs	.+4      	; 0x2d0 <decreaseLED+0xc>
 2cc:	88 50       	subi	r24, 0x08	; 8
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <decreaseLED+0xe>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	80 83       	st	Z, r24
	leds->G = (leds->G > LEDFADE) ? (leds->G - LEDFADE) : 0;
 2d4:	81 81       	ldd	r24, Z+1	; 0x01
 2d6:	89 30       	cpi	r24, 0x09	; 9
 2d8:	10 f0       	brcs	.+4      	; 0x2de <decreaseLED+0x1a>
 2da:	88 50       	subi	r24, 0x08	; 8
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <decreaseLED+0x1c>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	81 83       	std	Z+1, r24	; 0x01
	leds->B = (leds->B > LEDFADE) ? (leds->B - LEDFADE) : 0;
 2e2:	82 81       	ldd	r24, Z+2	; 0x02
 2e4:	89 30       	cpi	r24, 0x09	; 9
 2e6:	10 f0       	brcs	.+4      	; 0x2ec <decreaseLED+0x28>
 2e8:	88 50       	subi	r24, 0x08	; 8
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <decreaseLED+0x2a>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	82 83       	std	Z+2, r24	; 0x02
 2f0:	08 95       	ret

000002f2 <writeLED>:
}

void writeLED(LED_t* leds){
 2f2:	fc 01       	movw	r30, r24
	if((leds->R <= LEDGLOWR) && (leds->G <= LEDGLOWG) && (leds->B <= LEDGLOWB)){
 2f4:	90 81       	ld	r25, Z
 2f6:	91 31       	cpi	r25, 0x11	; 17
 2f8:	40 f4       	brcc	.+16     	; 0x30a <writeLED+0x18>
 2fa:	81 81       	ldd	r24, Z+1	; 0x01
 2fc:	81 31       	cpi	r24, 0x11	; 17
 2fe:	28 f4       	brcc	.+10     	; 0x30a <writeLED+0x18>
 300:	82 81       	ldd	r24, Z+2	; 0x02
 302:	81 31       	cpi	r24, 0x11	; 17
 304:	10 f4       	brcc	.+4      	; 0x30a <writeLED+0x18>
		leds->newColor = 1;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	83 83       	std	Z+3, r24	; 0x03
	}

	OCR2A = (leds->R > LEDGLOWR) ? leds->R : LEDGLOWR;
 30a:	90 31       	cpi	r25, 0x10	; 16
 30c:	08 f4       	brcc	.+2      	; 0x310 <writeLED+0x1e>
 30e:	90 e1       	ldi	r25, 0x10	; 16
 310:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR1B = (leds->G > LEDGLOWG) ? leds->G : LEDGLOWG;
 314:	81 81       	ldd	r24, Z+1	; 0x01
 316:	81 31       	cpi	r24, 0x11	; 17
 318:	10 f0       	brcs	.+4      	; 0x31e <writeLED+0x2c>
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <writeLED+0x30>
 31e:	80 e1       	ldi	r24, 0x10	; 16
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 326:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR1A = (leds->B > LEDGLOWB) ? leds->B : LEDGLOWB;
 32a:	82 81       	ldd	r24, Z+2	; 0x02
 32c:	81 31       	cpi	r24, 0x11	; 17
 32e:	10 f0       	brcs	.+4      	; 0x334 <writeLED+0x42>
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <writeLED+0x46>
 334:	80 e1       	ldi	r24, 0x10	; 16
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 33c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 340:	08 95       	ret

00000342 <main>:
void getRandomStartColor(LED_t* leds);
void bumpLEDS(LED_t* leds);
void decreaseLED(LED_t* leds);
void writeLED(LED_t* leds);

int main(void){
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	00 d0       	rcall	.+0      	; 0x348 <main+0x6>
 348:	00 d0       	rcall	.+0      	; 0x34a <main+0x8>
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
	LED_t leds;

	leds.R = LEDGLOWR;
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	89 83       	std	Y+1, r24	; 0x01
	leds.G = LEDGLOWG;
 352:	8a 83       	std	Y+2, r24	; 0x02
	leds.B = LEDGLOWB;
 354:	8b 83       	std	Y+3, r24	; 0x03
	leds.newColor = 1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	8c 83       	std	Y+4, r24	; 0x04

	// Initialize
	initLEDs();
 35a:	0e 94 4b 00 	call	0x96	; 0x96 <initLEDs>
	initADCs();
 35e:	0e 94 82 00 	call	0x104	; 0x104 <initADCs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	80 e7       	ldi	r24, 0x70	; 112
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x26>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x30>
 372:	00 00       	nop

	// Wait for ADC to make some readings
	_delay_ms(100);

	// Seed for random generator. Is this good enough? 
	srand(ADC);
 374:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 378:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 37c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <srand>

/*
 * Returns the value of the 10-bit ADC register
 */
uint16_t readADC(){
	return ADC;
 380:	08 e7       	ldi	r16, 0x78	; 120
 382:	10 e0       	ldi	r17, 0x00	; 0
 384:	f8 01       	movw	r30, r16
 386:	80 81       	ld	r24, Z
 388:	91 81       	ldd	r25, Z+1	; 0x01
    while (1) {
		// Read ADCs
		uint16_t currRead = readADC();

		// Update LEDStatus if threshold is reached
		if(currRead > ADCTHRESHOLD){
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	92 40       	sbci	r25, 0x02	; 2
 38e:	68 f0       	brcs	.+26     	; 0x3aa <main+0x68>
			if(leds.newColor){
 390:	8c 81       	ldd	r24, Y+4	; 0x04
 392:	88 23       	and	r24, r24
 394:	31 f0       	breq	.+12     	; 0x3a2 <main+0x60>
				// New color is needed
				getRandomStartColor(&leds);
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	0e 94 8d 00 	call	0x11a	; 0x11a <getRandomStartColor>
				leds.newColor = 0;
 39e:	1c 82       	std	Y+4, r1	; 0x04
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <main+0x68>
			} else {
				// Normalize values to LEDMAX
				bumpLEDS(&leds);
 3a2:	ce 01       	movw	r24, r28
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	0e 94 45 01 	call	0x28a	; 0x28a <bumpLEDS>
			}
		}

		// Write to LED
		writeLED(&leds);
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	0e 94 79 01 	call	0x2f2	; 0x2f2 <writeLED>

		// Decrease LEDStatus every loop
		decreaseLED(&leds);
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <decreaseLED>
 3ba:	8f e1       	ldi	r24, 0x1F	; 31
 3bc:	9e e4       	ldi	r25, 0x4E	; 78
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0x7c>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x82>
 3c4:	00 00       	nop
 3c6:	de cf       	rjmp	.-68     	; 0x384 <main+0x42>

000003c8 <__udivmodhi4>:
 3c8:	aa 1b       	sub	r26, r26
 3ca:	bb 1b       	sub	r27, r27
 3cc:	51 e1       	ldi	r21, 0x11	; 17
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <__udivmodhi4_ep>

000003d0 <__udivmodhi4_loop>:
 3d0:	aa 1f       	adc	r26, r26
 3d2:	bb 1f       	adc	r27, r27
 3d4:	a6 17       	cp	r26, r22
 3d6:	b7 07       	cpc	r27, r23
 3d8:	10 f0       	brcs	.+4      	; 0x3de <__udivmodhi4_ep>
 3da:	a6 1b       	sub	r26, r22
 3dc:	b7 0b       	sbc	r27, r23

000003de <__udivmodhi4_ep>:
 3de:	88 1f       	adc	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	5a 95       	dec	r21
 3e4:	a9 f7       	brne	.-22     	; 0x3d0 <__udivmodhi4_loop>
 3e6:	80 95       	com	r24
 3e8:	90 95       	com	r25
 3ea:	bc 01       	movw	r22, r24
 3ec:	cd 01       	movw	r24, r26
 3ee:	08 95       	ret

000003f0 <__divmodhi4>:
 3f0:	97 fb       	bst	r25, 7
 3f2:	07 2e       	mov	r0, r23
 3f4:	16 f4       	brtc	.+4      	; 0x3fa <__divmodhi4+0xa>
 3f6:	00 94       	com	r0
 3f8:	07 d0       	rcall	.+14     	; 0x408 <__divmodhi4_neg1>
 3fa:	77 fd       	sbrc	r23, 7
 3fc:	09 d0       	rcall	.+18     	; 0x410 <__divmodhi4_neg2>
 3fe:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodhi4>
 402:	07 fc       	sbrc	r0, 7
 404:	05 d0       	rcall	.+10     	; 0x410 <__divmodhi4_neg2>
 406:	3e f4       	brtc	.+14     	; 0x416 <__divmodhi4_exit>

00000408 <__divmodhi4_neg1>:
 408:	90 95       	com	r25
 40a:	81 95       	neg	r24
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__divmodhi4_neg2>:
 410:	70 95       	com	r23
 412:	61 95       	neg	r22
 414:	7f 4f       	sbci	r23, 0xFF	; 255

00000416 <__divmodhi4_exit>:
 416:	08 95       	ret

00000418 <__umulhisi3>:
 418:	a2 9f       	mul	r26, r18
 41a:	b0 01       	movw	r22, r0
 41c:	b3 9f       	mul	r27, r19
 41e:	c0 01       	movw	r24, r0
 420:	a3 9f       	mul	r26, r19
 422:	70 0d       	add	r23, r0
 424:	81 1d       	adc	r24, r1
 426:	11 24       	eor	r1, r1
 428:	91 1d       	adc	r25, r1
 42a:	b2 9f       	mul	r27, r18
 42c:	70 0d       	add	r23, r0
 42e:	81 1d       	adc	r24, r1
 430:	11 24       	eor	r1, r1
 432:	91 1d       	adc	r25, r1
 434:	08 95       	ret

00000436 <do_rand>:
 436:	8f 92       	push	r8
 438:	9f 92       	push	r9
 43a:	af 92       	push	r10
 43c:	bf 92       	push	r11
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	ec 01       	movw	r28, r24
 44c:	68 81       	ld	r22, Y
 44e:	79 81       	ldd	r23, Y+1	; 0x01
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	9b 81       	ldd	r25, Y+3	; 0x03
 454:	61 15       	cp	r22, r1
 456:	71 05       	cpc	r23, r1
 458:	81 05       	cpc	r24, r1
 45a:	91 05       	cpc	r25, r1
 45c:	21 f4       	brne	.+8      	; 0x466 <do_rand+0x30>
 45e:	64 e2       	ldi	r22, 0x24	; 36
 460:	79 ed       	ldi	r23, 0xD9	; 217
 462:	8b e5       	ldi	r24, 0x5B	; 91
 464:	97 e0       	ldi	r25, 0x07	; 7
 466:	2d e1       	ldi	r18, 0x1D	; 29
 468:	33 ef       	ldi	r19, 0xF3	; 243
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divmodsi4>
 472:	49 01       	movw	r8, r18
 474:	5a 01       	movw	r10, r20
 476:	9b 01       	movw	r18, r22
 478:	ac 01       	movw	r20, r24
 47a:	a7 ea       	ldi	r26, 0xA7	; 167
 47c:	b1 e4       	ldi	r27, 0x41	; 65
 47e:	0e 94 96 02 	call	0x52c	; 0x52c <__muluhisi3>
 482:	6b 01       	movw	r12, r22
 484:	7c 01       	movw	r14, r24
 486:	ac ee       	ldi	r26, 0xEC	; 236
 488:	b4 ef       	ldi	r27, 0xF4	; 244
 48a:	a5 01       	movw	r20, r10
 48c:	94 01       	movw	r18, r8
 48e:	0e 94 a4 02 	call	0x548	; 0x548 <__mulohisi3>
 492:	dc 01       	movw	r26, r24
 494:	cb 01       	movw	r24, r22
 496:	8c 0d       	add	r24, r12
 498:	9d 1d       	adc	r25, r13
 49a:	ae 1d       	adc	r26, r14
 49c:	bf 1d       	adc	r27, r15
 49e:	b7 ff       	sbrs	r27, 7
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <do_rand+0x72>
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	a1 09       	sbc	r26, r1
 4a6:	b0 48       	sbci	r27, 0x80	; 128
 4a8:	88 83       	st	Y, r24
 4aa:	99 83       	std	Y+1, r25	; 0x01
 4ac:	aa 83       	std	Y+2, r26	; 0x02
 4ae:	bb 83       	std	Y+3, r27	; 0x03
 4b0:	9f 77       	andi	r25, 0x7F	; 127
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	ff 90       	pop	r15
 4b8:	ef 90       	pop	r14
 4ba:	df 90       	pop	r13
 4bc:	cf 90       	pop	r12
 4be:	bf 90       	pop	r11
 4c0:	af 90       	pop	r10
 4c2:	9f 90       	pop	r9
 4c4:	8f 90       	pop	r8
 4c6:	08 95       	ret

000004c8 <rand_r>:
 4c8:	0e 94 1b 02 	call	0x436	; 0x436 <do_rand>
 4cc:	08 95       	ret

000004ce <rand>:
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 1b 02 	call	0x436	; 0x436 <do_rand>
 4d6:	08 95       	ret

000004d8 <srand>:
 4d8:	a0 e0       	ldi	r26, 0x00	; 0
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 4e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4e4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 4e8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 4ec:	08 95       	ret

000004ee <__divmodsi4>:
 4ee:	05 2e       	mov	r0, r21
 4f0:	97 fb       	bst	r25, 7
 4f2:	1e f4       	brtc	.+6      	; 0x4fa <__divmodsi4+0xc>
 4f4:	00 94       	com	r0
 4f6:	0e 94 8e 02 	call	0x51c	; 0x51c <__negsi2>
 4fa:	57 fd       	sbrc	r21, 7
 4fc:	07 d0       	rcall	.+14     	; 0x50c <__divmodsi4_neg2>
 4fe:	0e 94 a9 02 	call	0x552	; 0x552 <__udivmodsi4>
 502:	07 fc       	sbrc	r0, 7
 504:	03 d0       	rcall	.+6      	; 0x50c <__divmodsi4_neg2>
 506:	4e f4       	brtc	.+18     	; 0x51a <__divmodsi4_exit>
 508:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__negsi2>

0000050c <__divmodsi4_neg2>:
 50c:	50 95       	com	r21
 50e:	40 95       	com	r20
 510:	30 95       	com	r19
 512:	21 95       	neg	r18
 514:	3f 4f       	sbci	r19, 0xFF	; 255
 516:	4f 4f       	sbci	r20, 0xFF	; 255
 518:	5f 4f       	sbci	r21, 0xFF	; 255

0000051a <__divmodsi4_exit>:
 51a:	08 95       	ret

0000051c <__negsi2>:
 51c:	90 95       	com	r25
 51e:	80 95       	com	r24
 520:	70 95       	com	r23
 522:	61 95       	neg	r22
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	8f 4f       	sbci	r24, 0xFF	; 255
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	08 95       	ret

0000052c <__muluhisi3>:
 52c:	0e 94 0c 02 	call	0x418	; 0x418 <__umulhisi3>
 530:	a5 9f       	mul	r26, r21
 532:	90 0d       	add	r25, r0
 534:	b4 9f       	mul	r27, r20
 536:	90 0d       	add	r25, r0
 538:	a4 9f       	mul	r26, r20
 53a:	80 0d       	add	r24, r0
 53c:	91 1d       	adc	r25, r1
 53e:	11 24       	eor	r1, r1
 540:	08 95       	ret

00000542 <__mulshisi3>:
 542:	b7 ff       	sbrs	r27, 7
 544:	0c 94 96 02 	jmp	0x52c	; 0x52c <__muluhisi3>

00000548 <__mulohisi3>:
 548:	0e 94 96 02 	call	0x52c	; 0x52c <__muluhisi3>
 54c:	82 1b       	sub	r24, r18
 54e:	93 0b       	sbc	r25, r19
 550:	08 95       	ret

00000552 <__udivmodsi4>:
 552:	a1 e2       	ldi	r26, 0x21	; 33
 554:	1a 2e       	mov	r1, r26
 556:	aa 1b       	sub	r26, r26
 558:	bb 1b       	sub	r27, r27
 55a:	fd 01       	movw	r30, r26
 55c:	0d c0       	rjmp	.+26     	; 0x578 <__udivmodsi4_ep>

0000055e <__udivmodsi4_loop>:
 55e:	aa 1f       	adc	r26, r26
 560:	bb 1f       	adc	r27, r27
 562:	ee 1f       	adc	r30, r30
 564:	ff 1f       	adc	r31, r31
 566:	a2 17       	cp	r26, r18
 568:	b3 07       	cpc	r27, r19
 56a:	e4 07       	cpc	r30, r20
 56c:	f5 07       	cpc	r31, r21
 56e:	20 f0       	brcs	.+8      	; 0x578 <__udivmodsi4_ep>
 570:	a2 1b       	sub	r26, r18
 572:	b3 0b       	sbc	r27, r19
 574:	e4 0b       	sbc	r30, r20
 576:	f5 0b       	sbc	r31, r21

00000578 <__udivmodsi4_ep>:
 578:	66 1f       	adc	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	88 1f       	adc	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	1a 94       	dec	r1
 582:	69 f7       	brne	.-38     	; 0x55e <__udivmodsi4_loop>
 584:	60 95       	com	r22
 586:	70 95       	com	r23
 588:	80 95       	com	r24
 58a:	90 95       	com	r25
 58c:	9b 01       	movw	r18, r22
 58e:	ac 01       	movw	r20, r24
 590:	bd 01       	movw	r22, r26
 592:	cf 01       	movw	r24, r30
 594:	08 95       	ret

00000596 <_exit>:
 596:	f8 94       	cli

00000598 <__stop_program>:
 598:	ff cf       	rjmp	.-2      	; 0x598 <__stop_program>
